#!/bin/bash

# make sure to execute in bash (solaris package manager ignores #!/bin/bash)
procname=`ps -p $$$$ -ocomm=`
base=`basename $$procname`
clean_procname=`echo $$base | sed 's/[^a-zA-Z]//g'`

if test $$clean_procname != bash ; then
    /bin/bash "$$0"
    exit
fi

RC=0

function assert_rc() {
    if test $$RC -ne 0; then
        exit 1
    fi
}

function execute() {
    if test $$DEBUG -eq 0; then
        $$@ > /dev/null 2>&1
    else
        $$@
    fi
}

# debugging
DEBUG=0
if test -n "$$DEBUG_CUSTOM_ACTIONS" -a "$$DEBUG_CUSTOM_ACTIONS" == "1"; then
    DEBUG=1
    set -xv
fi

# bypass custom actions
if test -n "$$NO_CUSTOM_ACTIONS" -a "$$NO_CUSTOM_ACTIONS" != "0"; then
    exit 0
fi

# start
execute pushd .
execute cd $prefix

# delete old eggs
execute rm -rvf eggs

# cleanup pyc files and old directories
if test -d src; then
    execute find src -type f -name '*.pyc' -exec rm -vf '{}' \;
    execute find src -type d -empty -exec rmdir -v '{}' \;
fi

# bootstrap
execute parts/python/bin/python bootstrap.py --download-base=.cache/dist --setup-source=.cache/dist/ez_setup.py --index=http://256.256.256.256/
RC=$$?
assert_rc

# buildout
execute bin/buildout -U
RC=$$?
assert_rc

# link binaries to /usr/bin
execute cd bin
for script in *; do
    if test "$$script" == "buildout"; then
        continue;
    fi
    if test -n "$post_install_script_name" -a "$$script" == "$post_install_script_name"; then
        continue;
    fi
    if test -n "$pre_uninstall_script_name" -a "$$script" == "$pre_uninstall_script_name"; then
        continue;
    fi
    execute ln -s -f $prefix/bin/$$script /usr/bin/$$script
    RC=$$?
    assert_rc
done
cd ..

# execute application's post-install script
if test -n "$post_install_script_name" -a -x "bin/$post_install_script_name"; then
    execute bin/$post_install_script_name $post_install_script_args
    RC=$$?
    assert_rc
fi

#end
execute popd
exit 0
